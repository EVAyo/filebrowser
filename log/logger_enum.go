// Code generated by go-enum
// DO NOT EDIT!

package log

import (
	"database/sql/driver"
	"fmt"
)

const (
	// FormatPlain is a Format of type Plain
	FormatPlain Format = iota
	// FormatJson is a Format of type Json
	FormatJson
)

const _FormatName = "plainjson"

var _FormatMap = map[Format]string{
	0: _FormatName[0:5],
	1: _FormatName[5:9],
}

// String implements the Stringer interface.
func (x Format) String() string {
	if str, ok := _FormatMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Format(%d)", x)
}

var _FormatValue = map[string]Format{
	_FormatName[0:5]: 0,
	_FormatName[5:9]: 1,
}

// ParseFormat attempts to convert a string to a Format
func ParseFormat(name string) (Format, error) {
	if x, ok := _FormatValue[name]; ok {
		return x, nil
	}
	return Format(0), fmt.Errorf("%s is not a valid Format", name)
}

// MarshalText implements the text marshaller method
func (x Format) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *Format) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseFormat(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Scan implements the Scanner interface.
func (x *Format) Scan(value interface{}) error {
	var name string

	switch v := value.(type) {
	case string:
		name = v
	case []byte:
		name = string(v)
	case nil:
		*x = Format(0)
		return nil
	}

	tmp, err := ParseFormat(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Value implements the driver Valuer interface.
func (x Format) Value() (driver.Value, error) {
	return x.String(), nil
}

const (
	// LevelDebug is a Level of type Debug
	LevelDebug Level = iota
	// LevelInfo is a Level of type Info
	LevelInfo
	// LevelWarn is a Level of type Warn
	LevelWarn
	// LevelError is a Level of type Error
	LevelError
	// LevelCritical is a Level of type Critical
	LevelCritical
	// LevelFatal is a Level of type Fatal
	LevelFatal
)

const _LevelName = "debuginfowarnerrorcriticalfatal"

var _LevelMap = map[Level]string{
	0: _LevelName[0:5],
	1: _LevelName[5:9],
	2: _LevelName[9:13],
	3: _LevelName[13:18],
	4: _LevelName[18:26],
	5: _LevelName[26:31],
}

// String implements the Stringer interface.
func (x Level) String() string {
	if str, ok := _LevelMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Level(%d)", x)
}

var _LevelValue = map[string]Level{
	_LevelName[0:5]:   0,
	_LevelName[5:9]:   1,
	_LevelName[9:13]:  2,
	_LevelName[13:18]: 3,
	_LevelName[18:26]: 4,
	_LevelName[26:31]: 5,
}

// ParseLevel attempts to convert a string to a Level
func ParseLevel(name string) (Level, error) {
	if x, ok := _LevelValue[name]; ok {
		return x, nil
	}
	return Level(0), fmt.Errorf("%s is not a valid Level", name)
}

// MarshalText implements the text marshaller method
func (x Level) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *Level) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseLevel(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Scan implements the Scanner interface.
func (x *Level) Scan(value interface{}) error {
	var name string

	switch v := value.(type) {
	case string:
		name = v
	case []byte:
		name = string(v)
	case nil:
		*x = Level(0)
		return nil
	}

	tmp, err := ParseLevel(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Value implements the driver Valuer interface.
func (x Level) Value() (driver.Value, error) {
	return x.String(), nil
}
